buildscript {
    ext {
        springBootVersion = '2.4.1'
        springDependencyManagementVersion = '1.0.10.RELEASE'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'java'
    id 'maven-publish'
    id 'java-library'

}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


bootJar.enabled(false)
jar.enabled(false)

allprojects {
    group 'io.easywalk'
    version '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    sourceCompatibility = '11'
    targetCompatibility = '11'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
        implementation 'com.google.code.gson:gson:2.8.6'
        implementation 'org.springframework.boot:spring-boot-starter-validation'


        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }


    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        def gradleFile = new File(projectDir, "build.gradle")
        if (!gradleFile.exists())
            gradleFile.text = ""
    }
}

project(':simply-serviceable') {

}

project(':simply-controllable') {
    dependencies {
        compile project(':simply-serviceable')
    }
}

project(':simply-eventable-kafka-binder') {
    dependencies {
        compile project(':simply-serviceable')
    }
}

project(':simply-clientable') {
    dependencies {
        compile project(':simply-serviceable')
    }
}